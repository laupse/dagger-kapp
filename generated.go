// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	"go.dagger.io/dagger/sdk/go/dagger"
)

func (r *query) kapp(ctx context.Context) (*Kapp, error) {

	return new(Kapp), nil

}

type kapp struct{}
type query struct{}

func main() {
	dagger.Serve(context.Background(), map[string]func(context.Context, dagger.ArgsInput) (interface{}, error){
		"Kapp.loadCredentials": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var fs dagger.FSID

			bytes, err = json.Marshal(fc.Args["fs"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &fs); err != nil {
				return nil, err
			}

			var kc string

			bytes, err = json.Marshal(fc.Args["kc"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &kc); err != nil {
				return nil, err
			}

			return (&kapp{}).loadCredentials(ctx,

				fs,

				kc,
			)
		},
		"Kapp.deploy": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var app string

			bytes, err = json.Marshal(fc.Args["app"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &app); err != nil {
				return nil, err
			}

			var namespace string

			bytes, err = json.Marshal(fc.Args["namespace"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &namespace); err != nil {
				return nil, err
			}

			var kubeConfig dagger.SecretID

			bytes, err = json.Marshal(fc.Args["kubeConfig"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &kubeConfig); err != nil {
				return nil, err
			}

			var url string

			bytes, err = json.Marshal(fc.Args["url"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &url); err != nil {
				return nil, err
			}

			var file string

			bytes, err = json.Marshal(fc.Args["file"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &file); err != nil {
				return nil, err
			}

			var fs dagger.FSID

			bytes, err = json.Marshal(fc.Args["fs"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &fs); err != nil {
				return nil, err
			}

			return (&kapp{}).deploy(ctx,

				&app,

				&namespace,

				kubeConfig,

				&url,

				&file,

				fs,
			)
		},
		"Query.kapp": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			return (&query{}).kapp(ctx)
		},
	})
}
