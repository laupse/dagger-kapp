// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"go.dagger.io/dagger/sdk/go/dagger"
)

type CacheMountInput struct {
	// Cache mount name
	Name string `json:"name"`
	// Cache mount sharing mode (TODO: switch to enum)
	SharingMode string `json:"sharingMode"`
	// path at which the cache will be mounted
	Path string `json:"path"`
}

// An OCI-compatible container, also known as a docker container
type Container struct {
	// A unique identifier for this container
	ID string `json:"id"`
	// Initialize this container from the base image published at the given address
	From *Container `json:"from"`
	// This container's root filesystem. Mounts are not included.
	Rootfs *Directory `json:"rootfs"`
	// Retrieve a directory at the given path. Mounts are included.
	Directory *Directory `json:"directory"`
	// The user to be set for all commands
	User *string `json:"user"`
	// This container but with a different command user
	WithUser *Container `json:"withUser"`
	// The working directory for all commands
	Workdir *string `json:"workdir"`
	// This container but with a different working directory
	WithWorkdir *Container `json:"withWorkdir"`
	// A list of environment variables passed to commands
	Variables []string `json:"variables"`
	// The value of the specified environment variable
	Variable *string `json:"variable"`
	// This container plus the given environment variable
	WithVariable *Container `json:"withVariable"`
	// This container plus an env variable containing the given secret
	WithSecretVariable *Container `json:"withSecretVariable"`
	// This container minus the given environment variable
	WithoutVariable *Container `json:"withoutVariable"`
	// Entrypoint to be prepended to the arguments of all commands
	Entrypoint []string `json:"entrypoint"`
	// This container but with a different command entrypoint
	WithEntrypoint *Container `json:"withEntrypoint"`
	// List of paths where a directory is mounted
	Mounts []string `json:"mounts"`
	// This container plus a directory mounted at the given path
	WithMountedDirectory *Container `json:"withMountedDirectory"`
	// This container plus a file mounted at the given path
	WithMountedFile *Container `json:"withMountedFile"`
	// This container plus a temporary directory mounted at the given path
	WithMountedTemp *Container `json:"withMountedTemp"`
	// This container plus a cache directory mounted at the given path
	WithMountedCache *Container `json:"withMountedCache"`
	// This container plus a secret mounted into a file at the given path
	WithMountedSecret *Container `json:"withMountedSecret"`
	// This container after unmounting everything at the given path.
	WithoutMount *Container `json:"withoutMount"`
	// This container after executing the specified command inside it
	Exec *Container `json:"exec"`
	// Exit code of the last executed command. Zero means success.
	// Null if no command has been executed.
	ExitCode *int `json:"exitCode"`
	// The output stream of the last executed command.
	Stdout *File `json:"stdout"`
	// The error stream of the last executed command.
	Stderr *File `json:"stderr"`
	// Publish this container as a new image
	Publish string `json:"publish"`
}

// Core API
type Core struct {
	// Fetch an OCI image
	Image *dagger.Filesystem `json:"image"`
	Git   *dagger.Filesystem `json:"git"`
	// Look up a filesystem by its ID
	Filesystem *dagger.Filesystem `json:"filesystem"`
	// Look up a project by name
	Project *Project `json:"project"`
	// Look up a secret by ID
	Secret string `json:"secret"`
	// Add a secret
	AddSecret dagger.SecretID `json:"addSecret"`
}

// A directory
type Directory struct {
	// The content-addressed identifier of the directory
	ID string `json:"id"`
	// Return a list of files and directories at the given path
	Contents []string `json:"contents"`
	// Retrieve a file at the given path
	File *File `json:"file"`
	// A secret backed by the file at the given path
	Secret dagger.SecretID `json:"secret"`
	// This directory plus a new file written at the given path
	WithNewFile *Directory `json:"withNewFile"`
	// This directory plus the contents of the given file copied to the given path
	WithCopiedFile *Directory `json:"withCopiedFile"`
	// This directory with the file at the given path removed
	WithoutFile *Directory `json:"withoutFile"`
	// Retrieve a directory at the given path
	Directory *Directory `json:"directory"`
	// This directory plus a directory written at the given path
	WithDirectory *Directory `json:"withDirectory"`
	// This directory with the directory at the given path removed
	WithoutDirectory *Directory `json:"withoutDirectory"`
	// The difference between this directory and an another directory
	Diff *Directory `json:"diff"`
}

type ExecEnvInput struct {
	// Env var name
	Name string `json:"name"`
	// Env var value
	Value string `json:"value"`
}

type ExecInput struct {
	// Command to execute
	// Example: ["echo", "hello, world!"]
	Args []string `json:"args"`
	// Filesystem mounts
	Mounts []*MountInput `json:"mounts"`
	// Cached mounts
	CacheMounts []*CacheMountInput `json:"cacheMounts"`
	// Working directory
	Workdir *string `json:"workdir"`
	// Env vars
	Env []*ExecEnvInput `json:"env"`
	// Secret env vars
	SecretEnv []*ExecSecretEnvInput `json:"secretEnv"`
	// Include the host's ssh agent socket in the exec at the provided path
	SSHAuthSock *string `json:"sshAuthSock"`
}

// Additional options for executing a command
type ExecOpts struct {
	// Optionally write to the command's standard input
	//
	// - Null means don't touch stdin (no redirection)
	// - Empty string means inject zero bytes to stdin, then send EOF
	Stdin *string `json:"stdin"`
	// Optionally redirect the command's standard output to a file in the container.
	// Null means discard output.
	RedirectStdout *string `json:"redirectStdout"`
	// Optionally redirect the command's standard error to a file in the container.
	// Null means discard output.
	RedirectStderr *string `json:"redirectStderr"`
}

type ExecSecretEnvInput struct {
	// Env var name
	Name string `json:"name"`
	// Secret env var value
	ID dagger.SecretID `json:"id"`
}

// A schema extension provided by a project
type Extension struct {
	// path to the extension's code within the project's filesystem
	Path string `json:"path"`
	// schema contributed to the project by this extension
	Schema string `json:"schema"`
	// sdk used to generate code for and/or execute this extension
	Sdk string `json:"sdk"`
}

// A file
type File struct {
	// The content-addressed identifier of the file
	ID string `json:"id"`
	// The contents of the file
	Contents string `json:"contents"`
	// The size of the file, in bytes
	Size int `json:"size"`
}

// A git ref (tag or branch)
type GitRef struct {
	// The digest of the current value of this ref
	Digest string `json:"digest"`
	// The filesystem tree at this ref
	Tree *Directory `json:"tree"`
}

// A git repository
type GitRepository struct {
	// List of branches on the repository
	Branches []string `json:"branches"`
	// Details on one branch
	Branch *GitRef `json:"branch"`
	// List of tags on the repository
	Tags []string `json:"tags"`
	// Details on one tag
	Tag *GitRef `json:"tag"`
}

// Interactions with the user's host filesystem
type Host struct {
	// Fetch the client's workdir
	Workdir *LocalDir `json:"workdir"`
	// Fetch a client directory
	Dir *LocalDir `json:"dir"`
}

type Kapp struct {
	LoadCredentials dagger.SecretID `json:"loadCredentials"`
	Deploy          string          `json:"deploy"`
}

// A directory on the user's host filesystem
type LocalDir struct {
	// Read the contents of the directory
	Read *dagger.Filesystem `json:"read"`
	// Write the provided filesystem to the directory
	Write bool `json:"write"`
}

type MountInput struct {
	// filesystem to mount
	Fs dagger.FSID `json:"fs"`
	// path at which the filesystem will be mounted
	Path string `json:"path"`
}

// A set of scripts and/or extensions
type Project struct {
	// name of the project
	Name string `json:"name"`
	// schema provided by the project
	Schema *string `json:"schema"`
	// extensions in this project
	Extensions []*Extension `json:"extensions"`
	// scripts in this project
	Scripts []*Script `json:"scripts"`
	// other projects with schema this project depends on
	Dependencies []*Project `json:"dependencies"`
	// install the project's schema
	Install bool `json:"install"`
	// Code files generated by the SDKs in the project
	GeneratedCode *dagger.Filesystem `json:"generatedCode"`
}

// An executable script that uses the project's dependencies and/or extensions
type Script struct {
	// path to the script's code within the project's filesystem
	Path string `json:"path"`
	// sdk used to generate code for and/or execute this script
	Sdk string `json:"sdk"`
}
